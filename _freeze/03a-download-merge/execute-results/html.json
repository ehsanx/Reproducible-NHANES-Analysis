{
  "hash": "45b8e366a5452a9e5f1e736790d518ea",
  "result": {
    "markdown": "# Data Download and Merging\n\n---\n\nThis part of the tutorial covers the beginning of the data preparation workflow for the project. It details the process of downloading the raw NHANES data files, selecting relevant variables, and merging the files together. While these steps prepare the data primarily for the main survival analysis, similar preparation is also required for the subsequent sensitivity and exploratory analyses.\n\n::: {.callout-note}\nIn this chapter, we will:\n\n- Programmatically download 20 separate data files from 10 NHANES cycles (1999-2018).\n\n- Select and process only the necessary variables for the analysis.\n\n- Merge the demographic and smoking data for each cycle.\n\n- Harmonize variable names that are inconsistent across different survey years.\n:::\n\n\nWe begin by loading the R packages required for this workflow.\n\n---\n\n## Data Acquisition and Merging\n\n* R Code Chunk 1: Load Necessary Packages\n\n\nBefore we begin the analysis, we import the necessary libraries to ensure we can use the certain functions. The `nhanesA` package is essential, as it provides functions to directly access and import the National Health and Nutrition Examination Survey (NHANES) datasets. In this package, data files from the 10 cycles (1999–2018) are denoted by lettered suffixes. For example, the demographics file for 1999–2000 is named `DEMO`, while subsequent cycles are named `DEMO_B`, `DEMO_C`, and up to the letter J. Other key packages are loaded to support data manipulation, variable recoding and merging.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(nhanesA)\nlibrary(car)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(DataExplorer)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\n```\n:::\n\n\n---\n\n* R Code Chunk 2: Define NHANES Datasets by Cycle\n\nThe first step in our workflow is to define character vectors using `c()` that contain the specific names of the NHANES data files we need to download. Following the `nhanesA` package's naming convention, we create two vectors: `demo` for the demographic data files and `smoking` for the smoking questionnaire files, each covering the 10 cycles from 1999 to 2018.\n\n\n::: {.cell hash='03a-download-merge_cache/html/datasets_4d7fa348f18a8f3018159245b0f257ad'}\n\n```{.r .cell-code}\ndemo <- c(\"DEMO\", \"DEMO_B\", \"DEMO_C\", \"DEMO_D\", \"DEMO_E\", \n          \"DEMO_F\", \"DEMO_G\", \"DEMO_H\", \"DEMO_I\", \"DEMO_J\")\n\nsmoking <- c(\"SMQ\", \"SMQ_B\", \"SMQ_C\", \"SMQ_D\", \"SMQ_E\",\n             \"SMQ_F\", \"SMQ_G\", \"SMQ_H\", \"SMQ_I\", \"SMQ_J\")\n```\n:::\n\n\n---\n\n* R Code Chunk 3: Download and Process NHANES Data\n\nThis code section covers several key steps: downloading the raw data, defining the variables of interest, and then subsetting and processing the data files.\n\n**1. Download Raw Data**\n\nWith the data files' names defined in the lists `demo` and `smoking`, we now use the `lapply()` function to iterate through each vector and download the corresponding data files using `nhanesA::nhanes()`. For reproducibility and to avoid re-downloading the data every time the script is run, we save these lists of raw data files as `.rds` files into a `data/` subdirectory.\n\n::: {.callout-note}\nWe will heavily use the `lapply()` function in this section. This is a more efficient and readable alternative to a for loop in R for applying the same operation to each element of a list (in our case, each data file name).\n:::\n\n\n\n::: {.cell hash='03a-download-merge_cache/html/lapply-Download_ba8c6035c237e1ca11fc20868c793ec4'}\n\n```{.r .cell-code}\ndemo_list <- lapply(demo, nhanes)\ndemo_data_files <- demo_list\nsaveRDS(demo_data_files, \"data/demo_data_files.rds\")\n\nsmoking_list <- lapply(smoking, nhanes)\nsmoking_data_files <- smoking_list\nsaveRDS(smoking_data_files, \"data/smoking_data_files.rds\")\n```\n:::\n\n\n**2. Define Variables for Selection**\n\nNext, we define the specific variables (columns) we want to keep for our analysis. We create two vectors, `demo_columns` and `smoking_columns`, listing our variables of interest.\n\nIt is important to note a key inconsistency across the NHANES cycles: the variable for the participant's country of birth changes its name over time (`DMDBORN`, `DMDBORN2`, `DMDBORN4`). We include all three variations in our list to ensure we capture this information from every cycle. This will be changed into a single variable name later.\n\nFor the demographic data, we selected the following key columns:\n\n-   `SEQN`: Respondent sequence number (unique identifier).\n-   `RIDAGEYR`: Age in years at screening.\n-   `RIAGENDR`: Gender.\n-   `RIDRETH1`: Race and ethnicity.\n-   `DMDBORN` / `DMDBORN2` / `DMDBORN4`: Country of birth.\n-   `SDDSRVYR`: NHANES survey cycle year.\n-   `WTINT2YR`: Full sample 2-year interview weight.\n-   `WTMEC2YR`: Full sample 2-year Mobile Examination Center (MEC) exam weight.\n-   `SDMVPSU`: Masked variance pseudo-Primary Sampling Unit.\n-   `SDMVSTRA`: Masked variance pseudo-stratum.\n\nFor the smoking data, we selected the following key columns:\n\n-   `SEQN`: Respondent sequence number.\n-   `SMQ020`: Indicates if respondent smoked at least 100 cigarettes in life.\n-   `SMD030`: Age respondent started smoking cigarettes regularly.\n-   `SMQ040`: Current cigarette smoking status\n\n\n::: {.cell hash='03a-download-merge_cache/html/columns_244e4bfac7d1af25ab12bb105ab374bc'}\n\n```{.r .cell-code}\ndemo_columns <- c(\"SEQN\", \"RIDAGEYR\", \"RIAGENDR\", \"RIDRETH1\", \n                  \"DMDBORN\", \"DMDBORN2\", \"DMDBORN4\", \"SDDSRVYR\", \n                  \"WTINT2YR\", \"WTMEC2YR\", \"SDMVPSU\", \"SDMVSTRA\") \n\nsmoking_columns <- c(\"SEQN\", \"SMQ020\", \"SMD030\", \"SMQ040\") \n```\n:::\n\n\n**3. Subset Data and Translate Codes**\n\nThe final step in this section is to process the raw data. We iterate through each downloaded data file in the lists, `demo_data_files` and `smoking_data_files`, and perform two key operations:\n\n-   Select Columns: We use `dplyr::select()` with the `any_of()` helper to keep only the columns defined above in `demo_columns` and `smoking_columns`. Using `any_of()` prevents errors if a column name (e.g., `DMDBORN2`) doesn't exist in a particular data file.\n-   Translate Codes: We use `nhanesA::nhanesTranslate()` to convert the numeric codes in the data (e.g., `1` for 'Male') into more descriptive, human-readable factor labels.\n\nThe newly processed lists of data frames are stored in `demo_data_files_2` and `smoking_data_files_2`.\n\n\n::: {.cell hash='03a-download-merge_cache/html/subset_026da5edb18e481defa1fa928430e793'}\n\n```{.r .cell-code}\n# DEMOGRAPHICS\ndemo_data_files_2 <- lapply(seq_along(demo_data_files), function(i) {\n  current_cycle_data <- demo_data_files[[i]]\n  original <- demo[i] \n  \n  # Select Columns\n  subset_data <- current_cycle_data %>% \n    dplyr::select(dplyr::any_of(demo_columns))\n  # Translate \n  translated_data <- nhanesTranslate(original,\n                                     names(subset_data), \n                                     data = subset_data)\n  # Return\n  return(translated_data) \n})\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN2 SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN2 SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN4 SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN4 SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN4 SDDSRVYR\n#> Translated columns: RIAGENDR RIDRETH1 DMDBORN4 SDDSRVYR\n\n# SMOKING\nsmoking_data_files_2 <- lapply(seq_along(smoking_data_files), function(i) {\n  current_cycle_data <- smoking_data_files[[i]]\n  original <- smoking[i]\n\n  # Select Columns\n  subset_data <- current_cycle_data %>%\n    dplyr::select(dplyr::any_of(smoking_columns))\n  # Translate\n  translated_data <- nhanesTranslate(original, \n                                     names(subset_data), \n                                     data = subset_data)\n  # Return\n  return(translated_data)\n})\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n#> Translated columns: SMQ020 SMQ040\n```\n:::\n\n\n---\n\n* R Code Chunk 4: Merging Datasets\n\nNow that we have two processed lists of data frames (one for demographics and one for smoking), we need to merge them for each NHANES cycle. We iterate through both lists (`demo_data_files_2` and `smoking_data_files_2`), combining each corresponding pair of cycle-specific data frames into a single data frame.\n\nThe merge is performed using `plyr::join_all()` with the unique participant identifier, `SEQN`, as the key. We use a `type = 'full'` join to ensure that all participants from both datasets are kept in the final merged data, while `NA` values will be inserted for any non-matching records.\n\nThe final output, `data_all`, is a single list containing 10 merged data frames (one for each NHANES cycle).\n\n\n::: {.cell hash='03a-download-merge_cache/html/merge_646915991f4d4987ee224eaea5d56669'}\n\n```{.r .cell-code}\ndata_all <- lapply(seq_along(demo_data_files_2), function(i) {\n  demo_df <- demo_data_files_2[[i]]\n  smoking_df <- smoking_data_files_2[[i]]\n  \n  # Merge by SEQN\n  merged_df <- join_all(list(demo_df, smoking_df), \n                        by = \"SEQN\", \n                        type = 'full')\n  return(merged_df)\n})\n```\n:::\n\n\n---\n\n## Variable Recoding and Cleaning\n\n* R Code Chunk 5: Data Recoding and Cleaning\n\nThis code chunk is the most extensive data processing step of the tutorial. Here, we will loop through each of the 10 merged data frames stored in `data_all` to perform data cleaning and recoding. The goal is to create a new, standardized set of variables that are consistent across all survey cycles.\n\nWe will create clean variables for participant ID, demographics, smoking behavior, and survey design features.\n\n**1. Solve Inconsistent Column Names**\n\nAs noted previously, the column name for the country of birth is inconsistent across cycles (`DMDBORN`, `DMDBORN2`, `DMDBORN4`). Before we can recode the values, we must first combine these into a single, consistent column name, `DMDBORN`. The following loop handles this standardization.\n\n\n::: {.cell hash='03a-download-merge_cache/html/DMDBORN_1d2df2a37e307003b2c9b14289977306'}\n\n```{.r .cell-code}\ndata_all2 <- data_all\nfor (i in seq_along(data_all2)) {\n  df <- as.data.frame(data_all2[[i]])\n\n  if (\"DMDBORN2\" %in% names(df)) {\n    names(df)[names(df) == \"DMDBORN2\"] <- \"DMDBORN\"\n  } else if (\"DMDBORN4\" %in% names(df)) {\n    names(df)[names(df) == \"DMDBORN4\"] <- \"DMDBORN\"\n  }\n  data_all2[[i]] <- df\n}\n```\n:::\n\n\n**2. Recoding Reference Table**\n\nThe table below summarizes the key new variables that will be created below. This serves as a quick reference for the data cleaning process.\n\n| New Variable | Description |\n|------------------------------------|------------------------------------|\n| `id` | Unique participant ID (from `SEQN`) |\n| `age` | Age in years at screening (from `RIDAGEYR`) |\n| `sex` | Biological sex (from `RIAGENDR`) |\n| `race` | Race/ethnicity (from `RIDRETH1`), recoded into White, Black, Hispanic, Others |\n| `born` | Country of birth (from `DMDBORN`), recoded as \"Born in US\" or \"Other place\" |\n| `smoking` | Smoking status categorized into Never, Previous, or Current (from `SMQ020` and `SMQ040`) |\n| `smoking.age` | Age participant started smoking (`SMD030`), with special codes 777, 999 replaced by `NA`, and `0` for never smokers |\n| `smoked.while.child` | Derived variable indicating if smoking started at age 15 or younger |\n| `survey.weight` | Full sample 2-year interview weight (from `WTINT2YR`) |\n| `psu` | Masked variance pseudo-Primary Sampling Unit (from `SDMVPSU`) |\n| `strata` | Masked variance pseudo-stratum (from `SDMVSTRA`) |\n| `year` | Survey cycle year (from `SDDSRVYR`) |\n\n**3. Recoding and Cleaning Data**\n\nNow, we will perform the recoding in a series of steps. For clarity in this tutorial, we use a separate loop for each group of variables.\n\nFirst, we create a simple **ID** variable from the original `SEQN` variable.\n\n\n::: {.cell hash='03a-download-merge_cache/html/id_3780c26b3e6e2440cf61b516ec1ac45c'}\n\n```{.r .cell-code}\nfor (i in seq_along(data_all2)) {\n  # Set Data\n  dat2 <- data_all2[[i]]\n  \n  # ID\n  dat2$id <- dat2$SEQN\n  \n  # Return\n  data_all2[[i]] <- dat2\n}\n```\n:::\n\n\nNext, we recode the core **demographic** variables. This includes creating simple lowercase versions of `age` and `sex`, and collapsing the detailed categories for `race` and `born` into simpler factors using `car::recode()`.\n\n\n::: {.cell hash='03a-download-merge_cache/html/demographic_69062f1e62737c4d083a43048457fae8'}\n\n```{.r .cell-code}\nfor (i in seq_along(data_all2)) {\n  # Set Data\n  dat2 <- data_all2[[i]]\n  \n  # Age\n  dat2$age <- dat2$RIDAGEYR\n  \n  # Sex\n  dat2$sex <- dat2$RIAGENDR\n  \n  # Race/Ethnicity\n  dat2$race <- dat2$RIDRETH1\n  dat2$race <- car::recode(dat2$race, recodes = \"\n    'Non-Hispanic White'='White';\n    'Non-Hispanic Black'='Black';\n    c('Mexican American','Other Hispanic')='Hispanic';\n    else='Others'\")\n  dat2$race <- factor(dat2$race, \n                      levels = c(\"White\", \"Black\", \n                                 \"Hispanic\", \"Others\"))\n  \n  # Country of birth\n  dat2$born <- dat2$DMDBORN\n  dat2$born <- car::recode(dat2$born, recodes = \"\n    c('Born in Mexico','Born Elsewhere', 'Others') = 'Other place';\n    c('Born in 50 US States or Washington, DC', \n    'Born in 50 US states or Washington, DC') = 'Born in US';\n    else = NA\")\n  dat2$born <- factor(dat2$born, \n                      levels = c(\"Born in US\", \"Other place\"))\n  \n  # Return\n  data_all2[[i]] <- dat2\n}\n```\n:::\n\n\n\nThe tables below summarize the recoding logic for the demographic variables.\n\n| Original Variable | Original Categories                                | New Variable | New Categories |\n|-------------------|----------------------------------------------------|--------------|----------------|\n| `RIDRETH1`        | `Non-Hispanic White`                               | `race`       | `White`        |\n|                   | `Non-Hispanic Black`                               |              | `Black`        |\n|                   | `Mexican American`, `Other Hispanic`               |              | `Hispanic`     |\n|                   | `Non-Hispanic Asian`, `Other Race`                 |              | `Others`       |\n| `DMDBORN`         | `Born in 50 US States or Washington, DC`           | `born`       | `Born in US`   |\n|                   | `Born in Mexico`, `Born Elsewhere`, `Others`       |              | `Other place`  |\n\n\nNext, we recode the **smoking** variables. A key step here is creating the three-level smoking status factor (`Never`, `Previous`, `Current`). This requires using both `SMQ020` (smoked 100+ cigarettes) and `SMQ040` (smokes at all now) to correctly identify former smokers. We also clean the `smoking.age` variable and create a new binary variable, `smoked.while.child`.\n\n\n::: {.cell hash='03a-download-merge_cache/html/smoking_de6922545016be400b005c97d7634394'}\n\n```{.r .cell-code}\nfor (i in seq_along(data_all2)) {\n  # Set Data\n  dat2 <- data_all2[[i]]\n  \n  # Smoking Status\n  dat2$smoking <- dat2$SMQ020\n  dat2$smoking <- car::recode(dat2$smoking, \"\n    'Yes' = 'Current smoker';\n    'No' = 'Never smoker';\n    else = NA\")\n  dat2$smoking <- factor(dat2$smoking, \n                         levels = c(\"Never smoker\", \n                                    \"Previous smoker\", \n                                    \"Current smoker\"))\n  \n  # Use SMQ040 to identify former smokers\n  dat2$smoking[dat2$SMQ040 == \"Not at all?\" | \n                 dat2$SMQ040 == \"Not at all\"] <- \"Previous smoker\"\n  \n  # Age Started Smoking\n  dat2$smoking.age <- dat2$SMD030\n  dat2$smoking.age[dat2$smoking.age %in% c(777, 999)] <- NA\n  dat2$smoking.age[is.na(dat2$smoking.age) & \n                     dat2$smoking == \"Never smoker\"] <- 0\n  \n  # Whether Smoking started age ≤ 15\n  dat2$smoked.while.child <- car::recode(dat2$smoking.age, \n  \"0 = 'No'; 7:15 = 'Yes'; else = NA\", as.factor = TRUE)\n  \n  # Return\n  data_all2[[i]] <- dat2\n}\n```\n:::\n\n\nThe table below summarizes the logic for creating the final `smoking` status variable.\n\n| Step | Original Variable(s) | Logic | Resulting Category |\n|------|----------------------|-------|--------------------|\n| 1    | `SMQ020`             | `No`  | `Never smoker`     |\n| 2    | `SMQ020`             | `Yes` | `Current smoker`   |\n| 3    | `SMQ040`             | If `SMQ020` is `Yes` AND `SMQ040` is `Not at all`, re-categorize | `Previous smoker`  |\n\nFor `smoking.age`, numeric codes for \"Refused\" (`777`) and \"Don't know\" (`999`) were recoded to `NA`, and a value of `0` was assigned to never smokers for clarity.\n\nFinally, we create lowercase versions of the **survey design** variables for ease of use in later analyses.\n\n\n::: {.cell hash='03a-download-merge_cache/html/survey_a7d57faf4e0eeda2742b4ba1e72f027b'}\n\n```{.r .cell-code}\nfor (i in seq_along(data_all2)) {\n  # Set Data\n  dat2 <- data_all2[[i]]\n  \n  # Weight\n  dat2$survey.weight <- dat2$WTINT2YR\n  \n  # PSU\n  dat2$psu <- as.factor(dat2$SDMVPSU)\n  \n  # Strata\n  dat2$strata <- as.factor(dat2$SDMVSTRA)\n  \n  # Survey year\n  dat2$year <- dat2$SDDSRVYR\n  \n  # Return\n  data_all2[[i]] <- dat2\n}\n```\n:::\n\n\n---\n\n## Finalizing Datasets and Assessing Data Completeness\n\n* R Code Chunk 6: Create, Save, and Plot Datasets\n\nThe final step is to create the analytic datasets and save them for use in subsequent chapters. The following code loops through each of the 10 cleaned data frames and performs several actions:\n\n-   Selects the final set of cleaned variables.\n-   Creates the final analytic sample by filtering for eligible participants.\n-   Generates a missing data plot for each cycle and stores it in a list.\n-   Saves the data for each cycle into a separate .RData file.\n\nFirst, we define two vectors: `nhanes_all` contains the desired names for each cycle's data frame (e.g., `nhanes00`, `nhanes01`, etc.), and `vars` lists the set of cleaned variable names we want to keep for the analysis.\n\nWithin the loop, the code subsets the data to include only participants aged 20 years or older, matching the age criteria of the original paper. It then saves both the full data frame (all ages) and the filtered analytic data frame (ages 20+) into a single `.RData` file in the `data/` directory (e.g., `analytic00.RData`).\n\n\n::: {.cell hash='03a-download-merge_cache/html/analytic_fbd662df99a628e348215af1060e06c9'}\n\n```{.r .cell-code}\nnhanes_all <- c(\"nhanes00\", \"nhanes01\", \"nhanes03\", \"nhanes05\", \n                \"nhanes07\", \"nhanes09\", \"nhanes11\", \n                \"nhanes13\", \"nhanes15\", \"nhanes17\")\n\nvars <- c(\"id\", \"age\", \"sex\", \"race\", \"born\", \n          \"smoking.age\", \"smoked.while.child\", \"smoking\", \n          \"survey.weight\", \"psu\", \"strata\", \"year\")\n\nmissing_plots <- list()\n\n\nfor (i in seq_along(data_all2)) {\n  dat2 <- data_all2[[i]]\n  \n  nhanes_i <- nhanes_all[i]\n  assign(nhanes_i, dat2[, vars], envir = .GlobalEnv)\n  \n  analytic <- subset(get(nhanes_i), age >= 20)\n  \n  # Create a temporary dataset for plotting, excluding irrelevant variables\n  data_for_plot <- analytic %>% \n    dplyr::select(-born, -smoked.while.child)\n  \n  # Generate a plot, add a title, and remove individual axis titles\n  p <- plot_missing(data_for_plot) +\n       labs(title = nhanes_i) +\n       theme(\n         plot.title = element_text(hjust = 0.5),\n         legend.position = \"none\",\n         axis.title = element_blank()\n       )\n  missing_plots[[i]] <- p\n  \n  cat(\"Processing:\", nhanes_i, \"\\n\")\n  print(dim(analytic))\n  \n  analytic_i <- paste0(\"analytic\", substr(nhanes_i, 7, 8))\n  assign(analytic_i, analytic, envir = .GlobalEnv)\n  \n  # Create 'data' directory if it does not exist\n  if (!dir.exists(\"data\")) {\n    dir.create(\"data\")\n  }\n\n  # Save\n  save(list = c(nhanes_i, analytic_i),\n       file = file.path(\"data\", paste0(analytic_i, \".RData\")))\n}\n#> Processing: nhanes00 \n#> [1] 4880   12\n#> Processing: nhanes01 \n#> [1] 5411   12\n#> Processing: nhanes03 \n#> [1] 5041   12\n#> Processing: nhanes05 \n#> [1] 4979   12\n#> Processing: nhanes07 \n#> [1] 5935   12\n#> Processing: nhanes09 \n#> [1] 6218   12\n#> Processing: nhanes11 \n#> [1] 5560   12\n#> Processing: nhanes13 \n#> [1] 5769   12\n#> Processing: nhanes15 \n#> [1] 5719   12\n#> Processing: nhanes17 \n#> [1] 5569   12\n```\n:::\n\n\nFinally, the 10 missing data plots are displayed in a single 5x2 grid.\n\n\n::: {.cell hash='03a-download-merge_cache/html/fig-missing-data_3c49672c9547311585fe03dca45030f2'}\n\n```{.r .cell-code}\n# Define common axis labels\ny_label <- textGrob(\"Features\", gp = gpar(fontsize = 12), rot = 90)\nx_label <- textGrob(\"Missing Rows\", gp = gpar(fontsize = 12))\n\n# Arrange the plots in a grid with common labels\ngrid.arrange(\n  grobs = missing_plots,\n  nrow = 5,\n  ncol = 2,\n  left = y_label,\n  bottom = x_label\n)\n```\n\n::: {.cell-output-display}\n![Missing data patterns for analytic variables across all 10 NHANES cycles (1999-2018). The x-axis represents the number of missing observations.](03a-download-merge_files/figure-html/fig-missing-data-1.png){#fig-missing-data width=768}\n:::\n:::\n\n\nThis concludes the first part of the data preparation stage.\n\n---\n\n## Chapter Summary and Next Steps\n\nWe have now successfully completed the initial data acquisition and preparation phase. We have downloaded 20 raw data files, processed them into a consistent format, and merged them into a single list of 10 data frames—one for each NHANES cycle.\n\nIn the next chapter, \"Mortality and NHANES Merging,\" we will combine these 10 data frames and link them with the public-use mortality data to create the final, comprehensive dataset for our analysis.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}